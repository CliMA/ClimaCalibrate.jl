var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Model-Interface","page":"API","title":"Model Interface","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CalibrateAtmos.get_config\nCalibrateAtmos.run_forward_model\nCalibrateAtmos.get_forward_model\nCalibrateAtmos.observation_map","category":"page"},{"location":"api/#CalibrateAtmos.get_config","page":"API","title":"CalibrateAtmos.get_config","text":"get_config(member, iteration, experiment_id::AbstractString)\nget_config(member, iteration, config_dict::AbstractDict)\n\nReturns an AtmosConfig object for the given member and iteration. If given an experiment id string, it will load the config from the corresponding YAML file. Turns off default diagnostics and sets the TOML parameter file to the member's path. This assumes that the config dictionary has output_dir and restart_file keys.\n\n\n\n\n\n","category":"function"},{"location":"api/#CalibrateAtmos.run_forward_model","page":"API","title":"CalibrateAtmos.run_forward_model","text":"run_forward_model(config::AbstractDict)\n\nRuns the atmosphere model with the given an AtmosConfig object. Currently only has basic error handling.\n\n\n\n\n\n","category":"function"},{"location":"api/#CalibrateAtmos.get_forward_model","page":"API","title":"CalibrateAtmos.get_forward_model","text":"get_forward_model(experiment_id::Val)\n\nReturns the custom physical model objet for the given experiment id. An error is thrown if the experiment id is not recognized.\n\n\n\n\n\n","category":"function"},{"location":"api/#CalibrateAtmos.observation_map","page":"API","title":"CalibrateAtmos.observation_map","text":"observation_map(physical_model::AbstractPhysicalModel, iteration)\n\nReturns the observation for the given case id Value and iteration.\n\nNB: ensure that the model output is sufficiently sensitive to the input parameters.\n\n\n\n\n\n","category":"function"},{"location":"api/#EnsembleKalmanProcesses-Interface","page":"API","title":"EnsembleKalmanProcesses Interface","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CalibrateAtmos.initialize\nCalibrateAtmos.update_ensemble","category":"page"},{"location":"api/#CalibrateAtmos.initialize","page":"API","title":"CalibrateAtmos.initialize","text":"initialize(\n    experiment_id;\n    config = YAML.load_file(\"experiments/$experiment_id/ekp_config.yml\"),\n    Î“ = JLD2.load(config[\"truth_noise\"]),\n    y = JLD2.load(config[\"truth_data\"]),\n    rng_seed = 1234,\n)\n\nInitializes the EKP object and the model ensemble.\n\nTakes in\n\nexperiment_id: the name of the experiment, which corresponds to the name of the subfolder in experiments/\nconfig: a dictionary of configuration values\n\n\n\n\n\n","category":"function"},{"location":"api/#CalibrateAtmos.update_ensemble","page":"API","title":"CalibrateAtmos.update_ensemble","text":"update_ensemble(\n    experiment_id,\n    iteration;\n    config = YAML.load_file(\"experiments/$experiment_id/ekp_config.yml\"),\n)\n\nUpdates the EKI object and saves parameters for the next iteration. Assumes that the observation map has been run and saved in the current iteration folder.\n\n\n\n\n\n","category":"function"},{"location":"emulate_sample/#Emulate-and-Sample","page":"Emulate and Sample","title":"Emulate and Sample","text":"","category":"section"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"Once you have run a successful calibration, we can fit an emulator to the resulting input/output pairs.","category":"page"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"First, import the necessary packages:","category":"page"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"import JLD2\n\nusing CalibrateEmulateSample.Emulators\nusing CalibrateEmulateSample.MarkovChainMonteCarlo\n\nimport EnsembleKalmanProcesses as EKP\nusing EnsembleKalmanProcesses.ParameterDistributions\nusing EnsembleKalmanProcesses.TOMLInterface\n\nimport CalibrateAtmos as CAL","category":"page"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"Next, load in the data, EKP object, and prior distribution. These values are taken from the perfect model experiment with experiment ID sphere_held_suarez_rhoe_equilmoist.","category":"page"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"asset_path = joinpath(\n    pkgdir(CAL),\n    \"docs\",\n    \"src\",\n    \"assets\")\n\nekp = JLD2.load_object(joinpath(asset_path, \"emulate_example_ekiobj.jld2\"))\ny_obs = ekp.obs_mean\ny_noise_cov = ekp.obs_noise_cov\ninitial_params = [EKP.get_u_final(ekp)[1]]\n\nprior_path = joinpath(asset_path, \"emulate_example_prior.toml\")\nprior = CAL.get_prior(prior_path)","category":"page"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"Get the input-output pairs which will be used to train the emulator.  The inputs are the parameter values, and the outputs are the result of the observation map.  In thise case, the outputs are the average air temperature at roughly 500 meters.","category":"page"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"input_output_pairs = CAL.get_input_output_pairs(ekp)","category":"page"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"Next, create the Gaussian Process-based emulator and Markov chain.  The samples from the chain can be used in future predictive model runs with the same configuration. The posterior distribution can be saved to a JLD2 file using save_posterior. Samples can be extracted from the posterior using ClimaParams.","category":"page"},{"location":"emulate_sample/","page":"Emulate and Sample","title":"Emulate and Sample","text":"emulator = CAL.gp_emulator(input_output_pairs, y_noise_cov)\n(; mcmc, chain) = CAL.sample(emulator, y_obs, prior, initial_params)\nconstrained_posterior = CAL.save_posterior(mcmc, chain; filename = \"samples.jld2\")\ndisplay(chain)","category":"page"},{"location":"experiment_setup_guide/#Experiment-Set-Up-Guide-for-ClimaAtmos","page":"Experiment Setup Guide","title":"Experiment Set Up Guide for ClimaAtmos","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Please read this entire guide before setting up an experiment. This guide assumes familiarity with ClimaAtmos and a basic understanding of Ensemble Kalman Inversion (EKI). Because moderate resolution ClimaAtmos runs need to be run with MPI and/or on GPU, this example demonstrates how to run the pipeline of a perfect model example calibration (i.e., generating the \"true\" data with the same model that we are calibrating with towards a known set of parameters) using bash scripts for the Caltech HPC cluster and the EKI calibration machinery.","category":"page"},{"location":"experiment_setup_guide/#Summary","page":"Experiment Setup Guide","title":"Summary","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"The overall pipeline is as follows:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"For a perfect model scenario, observations are generated by running the model and then processing the diagnostic output through the constructed observation map.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"For the example experiment, sphere_held_suarez_rhoe_equilmoist, this is done by running sbatch experiments/sphere_held_suarez_rhoe_equilmoist/generate_observations.sbatch. This script runs the model, passes the output through the observation map, and saves the result.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Once the observations have been processed and saved, the actual calibration pipeline can be run via bash experiments/pipeline.sh sphere_held_suarez_rhoe_equilmoist 8.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"note: Note\nThe command line interface for pipeline.sh will change. For now, the first entry is the experiment id and the second is the number of tasks to use per ensemble member.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"This consists of three sbatch scripts:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"initialize.sbatch initializes the Julia project and the ensemble\nmodel_run.sbatch runs an individual forward model\nupdate.sbatch performs the update step and sets up the next iteration","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"To calibrate parameters, you need:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Atmos model configuration\nSteady-state restart file\nEKP configuration\nPrior parameter distributions\nTruth and noise data\nObservation map script with a function observation_map(iteration)","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"These components are detailed in the guide below. Examples of all of these can also be found in experiments/sphere_held_suarez_rhoe_equilmoist","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"First, create a folder for your experiment with a descriptive experiment id in the experiments/ folder. All of the components described below will be stored in this folder.","category":"page"},{"location":"experiment_setup_guide/#Atmos-Configuration-File","page":"Experiment Setup Guide","title":"Atmos Configuration File","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"This is the ClimaAtmos configuration which will be used to run all simulations in the calibration. The only changes between model runs are the parameters selected for calibration. This file is a typical Atmos YAML file with a few restrictions. It must:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"be named model_config.yml.\ninclude an output_dir to store model output.\ninclude the path to the restart file. This is detailed in the next section.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Here is an example of the arguments you will need:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"output_dir: output/experiment_name\nrestart_file: experiments/experiment_name/restart_file.hdf5","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"If your configuration requires a parameter TOML file, add this file to the experiment folder and set the toml entry in the configuration to the relative file path from the base directory of CalibrateAtmos.jl.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"note: Note\nWhen targeting a global or otherwise costly simulation, it may be worth it to optimize your timestep dt as well as your timestepping algorithm, ode_algo.","category":"page"},{"location":"experiment_setup_guide/#Restart-File","page":"Experiment Setup Guide","title":"Restart File","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"The restart file is a model snapshot which will be used to spin-off all ensemble members' forward model runs.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Once you have settled on a configuration, follow these steps to generate a restart file:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Run ClimaAtmos with your configuration to determine the time it takes for the simulation to reach an equilibrium state.\nGenerate a restart file by setting dt_save_restart in the model configuration to the equilibrium timestamp.\nTransfer the file to your experiment directory and enter the relative path into your atmosphere configuration file:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"restart_file: experiments/experiment_name/restart_file.hdf5","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"note: Note\nA restarted simulation starts from the saved date of the restart file. A restart file saved at 200 days and a t_end of 201 days will only run for 1 simulated day:restart_file: experiments/experiment_name/day200.hdf5\nt_end: 201 days","category":"page"},{"location":"experiment_setup_guide/#Prior-Distribution-File","page":"Experiment Setup Guide","title":"Prior Distribution File","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"First, create your TOML file in your experiment folder. For each calibrated parameter, create a prior distribution with the following format:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"[long_name]\nalias = \"alias_name\"\ntype = \"float\"\nprior = \"Parameterized(Normal(0,1))\"\nconstraint = \"[bounded(0,5)]\"","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Note that the prior distribution here is in unconstrained space - the constraint list constrains the distribution in parameter space.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"note: Why two parameter spaces?\nThe calibration tools are effective when working with unconstrained parameters (u), whereas physical models typically require (partially-)bounded parameters (Ï†). To satisfy both conditions the ParameterDistribution object contains maps between these two spaces. The drawback is that the prior must be defined in the unconstrained space.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"An easy way to generate prior distributions in constrained parameter space is with the constrained_gaussian constructor from EnsembleKalmanProcesses.ParameterDistributions. Here is an example:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"using EnsembleKalmanProcesses.ParameterDistributions\nphysical_mean = 125\nphysical_std = 40\nlower_bound = -50\nupper_bound = Inf\nconstrained_gaussian(\"name\", physical_mean, physical_std, lower_bound, upper_bound)","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"This constructor will provide a Normal distribution, which, when transformed will approximate the target mean and standard deviation provided.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"ParameterDistribution with 1 entries:\n'name' with Constraint{BoundedBelow}[Bounds: (-50, âˆž)] over distribution\nParameterized(Distributions.Normal{Float64}(Î¼=5.1393230339433345, Ïƒ=0.2256676316186263))","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Copy the mean and standard deviation values into the constructor for the prior distribution in your TOML file like so:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"[long_name]\nalias = \"alias_name\"\ntype = \"float\"\nprior = \"Parameterized(Normal(5.1393230, 0.225667))\"\nconstraint = \"bounded_below(-50)\"\ndescription = \" this prior has approximate (mean,std) = (125,40) and is bounded below by -50\"","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"You can also ensure that the bounds match the constraint entry in your TOML file. Since constraint is a TOML string parsed to a vector in Julia, ensure that you have quotes around the square brackets for the constraint list.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Constraint constructors:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Lower bound: bounded_below(0)\nUpper bound: bounded_above(2)\nUpper and lower bounds: bounded(0, 2)","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"note: Note\nThe API for constrained_gaussian priors in TOML files is coming soon. This page will be updated accordingly.","category":"page"},{"location":"experiment_setup_guide/#Observation-Map","page":"Experiment Setup Guide","title":"Observation Map","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"The observation map is applied to process model output diagnostics into the exact observable used to fit to observations. In a perfect model setting it is used also to generate the observation.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"This component is inflexible for now. Your observation map file must be a script with the name observation_map.jl which exports a function observation_map(::Val{:<experiment_id>}, iteration), this function is specific to each experiment, so it is dispatched on the experiment_id. These requirements arise from the update step, which runs:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"include(\"experiments/$experiment_id/observation_map.jl\")\nobservation_map(::Val(Symbol(experiment_id)), iteration)","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"This function must load in model diagnostics for each ensemble member in the iteration and construct an array arr = Array{Float64}(undef, dims..., ensemble_size) such that arr[:, i] will return the i-th ensemble member's observation map output. Note this floating point precision is required for the EKI update step.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"In the update step of EKI, the array will be saved in a JLD2 file named observation_map.jld2 in the iteration folder of the output directory.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"As an example, in observation_map(iteration) in the sphere_held_suarez_rhoe_equilmoist experiment, we have the following sequence:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"observation_map(::Val{:sphere_held_suarez_rhoe_equilmoist}, iteration) constructs the array to store the ensemble's observations. Then, for each ensemble member m:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"it loads in the model diagnostic output, in this case 60-day air temperature averages.\nit calls process_member_data(m) and stores the result in the output array.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Pseudocode for observation_map(iteration):","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"function observation_map(::Val{:sphere_held_suarez_rhoe_equilmoist}, iteration)\n    # Get Configuration\n    experiment_id = \"sphere_held_suarez_rhoe_equilmoist\"\n    config = load_config(experiment_id)\n    ensemble_size = config[\"ensemble_size\"]\n\n    # Setup output array\n    # dims = size of individual member observation map output\n    dims = 1\n    G_ensemble = Array{Float64}(undef, dims..., ensemble_size)\n\n    for m in 1:ensemble_size\n        ta = load_member_diagnostics(m)\n        # Compute observation map for the member\n        G_ensemble[:, m] = process_member_data(ta)\n    end\n    return G_ensemble\nend","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"process_member_data(m) then does the following:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Removes the first two samples to ensure an equilibrium state\nAverages across latitude and longitude\nExtracts the second height slice\nReturns the third sample in an array","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Pseudocode for process_member_data(m):","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"function process_member_data(ta; output_variance = false)\n    # Cut off first two points to ensure equilibrium, grab second height slice\n    ta_second_height = ta[3:size(ta)[1], :, :, 2]\n    # Average over long and latitude\n    area_avg_ta_second_height =\n        longitudinal_avg(latitudinal_avg(ta_second_height))\n    # Take the third sample\n    observation = [area_avg_ta_second_height[3]]\n    return observation\nend","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"If you are running a perfect-model experiment and generating truth data from ClimaAtmos itself, you may find it useful to create a kernel function to compute the observation map for each ensemble member. You can use this to run the default simulation's diagnostic output through the observation map and save the truth data and noise.","category":"page"},{"location":"experiment_setup_guide/#Generating-Truth-Data","page":"Experiment Setup Guide","title":"Generating Truth Data","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"The truth data must be an array of observations with the same dimensions as an individual ensemble member's entry in the observation map (arr[:, i] from above).","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"The noise is the sample covariance of the truth data. The dimension of each truth data sample determines how many samples you need to generate. Covariance estimation techniques may be required for high dimensional truth data.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Save a single sample from the observations and the noise in separate JLD2 files. These will be read in when constructing the EKP object. For sphere_held_suarez_rhoe_equilmoist, these are saved as obs_mean.jld2 and obs_noise_cov.jld2 respectively. To inspect them, start julia --project=experiments and run:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"import JLD2\nexperiment_path = joinpath(\"experiments\", \"sphere_held_suarez_rhoe_equilmoist\")\ntruth = JLD2.load_object(joinpath(experiment_path, \"obs_mean.jld2\"))\nnoise = JLD2.load_object(joinpath(experiment_path, \"obs_noise_cov.jld2\"))","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"note: Note\nFor full reproducibility, create and store a script that generates the truth data. If running a perfect-model scenario, the script should run the model and use the resulting diagnostic output to generate the truth data.","category":"page"},{"location":"experiment_setup_guide/#EKP-Configuration-File","page":"Experiment Setup Guide","title":"EKP Configuration File","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"For now, your EKP configuration file must be named ekp_config.yml The EKP configuration file must contain the following:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"n_iterations, the number of iterations to run\nensemble_size, the ensemble size\nprior_path, the path to the TOML file with the prior parameter distributions\ntruth_data, the truth data\ntruth_noise, the covariance of the truth data\noutput_dir, the folder where you want calibration data and logs to be output. This must be the same as the output_dir in the model configuration file.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Example:","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"output_dir: output/sphere_held_suarez_rhoe_equilmoist\nprior_path: experiments/sphere_held_suarez_rhoe_equilmoist/prior.toml\nensemble_size: 10\nn_iterations: 3\ntruth_data: experiments/sphere_held_suarez_rhoe_equilmoist/obs_mean.jld2\ntruth_noise: experiments/sphere_held_suarez_rhoe_equilmoist/obs_noise_cov.jld2","category":"page"},{"location":"experiment_setup_guide/#Plotting-Results","page":"Experiment Setup Guide","title":"Plotting Results","text":"","category":"section"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"A function convergence_plot(eki, prior, theta_star) is included in plot/convergence_plots.jl. Given the EKI object, prior, and goal parameter theta_star, it will output plots with error, spread, and parameter values over iterations.","category":"page"},{"location":"experiment_setup_guide/","page":"Experiment Setup Guide","title":"Experiment Setup Guide","text":"Sample plot from sphere_held_suarez_rhoe_equilmoist: (Image: Convergence Plot)","category":"page"},{"location":"quickstart/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"Before you run, make sure your system meets the dependencies of CalibrateEmulateSample.jl. TODO: remove if workaround","category":"page"},{"location":"quickstart/#HPC-Cluster","page":"Getting Started","title":"HPC Cluster","text":"","category":"section"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"A good way to get started is to run the initial experiment, sphere_held_suarez_rhoe_equilmoist. It is a perfect-model calibration, serving as a test case for the initial pipeline.","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"This experiment runs the Held-Suarez configuration, estimating the parameter equator_pole_temperature_gradient_wet. By default, it runs 10 ensemble members for 3 iterations.","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"To run this experiment:","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"Log onto the Caltech HPC\nClone CalibrateAtmos.jl and cd into the repository.\nRun: bash experiments/pipeline.sh sphere_held_suarez_rhoe_equilmoist 8. This will run the sphere_held_suarez_rhoe_equilmoist experiment with 8 tasks per ensemble member.","category":"page"},{"location":"quickstart/#Local-Machine","page":"Getting Started","title":"Local Machine","text":"","category":"section"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"To run an experiment on your local machine, you can use the experiments/pipeline.jl script. This is recommended for more lightweight experiments, such as the surface_fluxes_perfect_model experiment, which uses the SurfaceFluxes.jl package to generate a physical model that calculates the Monin Obukhov turbulent surface fluxes based on idealized atmospheric and surface conditions. Since this is a \"perfect model\" example, the same model is used to generate synthetic observations using its default parameters and a small amount of noise. These synthetic observations are considered to be the ground truth, which is used to assess the model ensembles' performance when parameters are drawn from the prior parameter distributions. To run this experiment, you can use the following command from terminal to run an interactive run:","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"julia -i experiments/pipeline.jl surface_fluxes_perfect_model","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"This pipeline mirrors the pipeline of the bash srcipts, and the same example can be run on the HPC cluster if needed:","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"bash experiments/pipeline.sh surface_fluxes_perfect_model 8","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"The experiments (such as surface_fluxes_perfect_model) can be equally defined within the component model repos (in this case, SurfaceFluxes.jl), so that the internals of CalibrateAtmos.jl do not explicitly depend on component models.","category":"page"},{"location":"precompilation/#Using-PrecompileTools-for-faster-model-runs","page":"Precompilation","title":"Using PrecompileTools for faster model runs","text":"","category":"section"},{"location":"precompilation/","page":"Precompilation","title":"Precompilation","text":"PrecompileTools.jl enables developers to force the Julia compiler to save more code to disk, preventing re-compilation in the future.","category":"page"},{"location":"precompilation/","page":"Precompilation","title":"Precompilation","text":"For CalibrateAtmos, this is useful under certain conditions:","category":"page"},{"location":"precompilation/","page":"Precompilation","title":"Precompilation","text":"The atmosphere model configuration is set and will not change often. This is because the model configuration specifies things like the floating-point type and callbacks, which affect the MethodInstances that get precompiled. Generically precompiling ClimaAtmos would take much too long to be useful.\nThe model runtime is short compared to the compile time. If the model runtime is an order of magnitude or more than the compilation time, any benefit from reduced compilation time will be trivial.","category":"page"},{"location":"precompilation/#How-do-I-precompile-my-configuration?","page":"Precompilation","title":"How do I precompile my configuration?","text":"","category":"section"},{"location":"precompilation/","page":"Precompilation","title":"Precompilation","text":"The easiest way is by copying and pasting the code snippet below into src/CalibrateAtmos.jl and replacing the job_id with your experiment ID. This will precompile the model step and all callbacks for the given configuration.","category":"page"},{"location":"precompilation/","page":"Precompilation","title":"Precompilation","text":"using PrecompileTools\nimport SciMLBase\nimport ClimaAtmos as CA\nimport YAML\n\n@setup_workload begin\n    output = joinpath(\"precompilation\")\n    job_id = \"your configuration\"\n    config_file = joinpath(\"experiments\", job_id, \"atmos_config.yml\")\n    config_dict = YAML.load_file(config_file)\n    config_dict[\"output_dir\"] = output\n    @compile_workload begin\n        initialize(job_id)\n        config = CA.AtmosConfig(config_dict)\n        simulation = CA.get_simulation(config)\n        (; integrator) = simulation\n        SciMLBase.step!(integrator)\n        CA.call_all_callbacks!(integrator)\n    end\nend","category":"page"},{"location":"#CalibrateAtmos.jl","page":"Home","title":"CalibrateAtmos.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CalibrateAtmos.jl is a library for the data assimilation pipeline used for ClimaAtmos.jl.","category":"page"}]
}
